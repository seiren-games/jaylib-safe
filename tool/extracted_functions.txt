public static IntBuffer createIntBuffer(int size);
public static FloatBuffer createFloatBuffer(int size);
public static ByteBuffer createByteBuffer(int size);
public static void initWindow( int width, int height, String title );
public static void closeWindow( );
public static boolean windowShouldClose( );
public static boolean isWindowReady( );
public static boolean isWindowFullscreen( );
public static boolean isWindowHidden( );
public static boolean isWindowMinimized( );
public static boolean isWindowMaximized( );
public static boolean isWindowFocused( );
public static boolean isWindowResized( );
public static boolean isWindowState( int flag );
public static void setWindowState( int flags );
public static void clearWindowState( int flags );
public static void toggleFullscreen( );
public static void toggleBorderlessWindowed( );
public static void maximizeWindow( );
public static void minimizeWindow( );
public static void restoreWindow( );
public static void setWindowIcon( Image image );
public static void setWindowIcons( Image images, int count );
public static void setWindowTitle( String title );
public static void setWindowPosition( int x, int y );
public static void setWindowMonitor( int monitor );
public static void setWindowMinSize( int width, int height );
public static void setWindowMaxSize( int width, int height );
public static void setWindowSize( int width, int height );
public static void setWindowOpacity( float opacity );
public static void setWindowFocused( );
public static MemorySegment getWindowHandle( );
public static int getScreenWidth( );
public static int getScreenHeight( );
public static int getRenderWidth( );
public static int getRenderHeight( );
public static int getMonitorCount( );
public static int getCurrentMonitor( );
public static Vector2 getMonitorPosition( int monitor );
public static Vector2 getMonitorPosition(Arena arena, int monitor );
public static int getMonitorWidth( int monitor );
public static int getMonitorHeight( int monitor );
public static int getMonitorPhysicalWidth( int monitor );
public static int getMonitorPhysicalHeight( int monitor );
public static int getMonitorRefreshRate( int monitor );
public static Vector2 getWindowPosition( );
public static Vector2 getWindowPosition(Arena arena );
public static Vector2 getWindowScaleDPI( );
public static Vector2 getWindowScaleDPI(Arena arena );
public static String getMonitorName( int monitor );
public static void setClipboardText( String text );
public static String getClipboardText( );
public static Image getClipboardImage( );
public static Image getClipboardImage(Arena arena );
public static void enableEventWaiting( );
public static void disableEventWaiting( );
public static void showCursor( );
public static void hideCursor( );
public static boolean isCursorHidden( );
public static void enableCursor( );
public static void disableCursor( );
public static boolean isCursorOnScreen( );
public static void clearBackground( Color color );
public static void beginDrawing( );
public static void endDrawing( );
public static void beginMode2D( Camera2D camera );
public static void endMode2D( );
public static void beginMode3D( Camera3D camera );
public static void endMode3D( );
public static void beginTextureMode( RenderTexture target );
public static void endTextureMode( );
public static void beginShaderMode( Shader shader );
public static void endShaderMode( );
public static void beginBlendMode( int mode );
public static void endBlendMode( );
public static void beginScissorMode( int x, int y, int width, int height );
public static void endScissorMode( );
public static void beginVrStereoMode( VrStereoConfig config );
public static void endVrStereoMode( );
public static VrStereoConfig loadVrStereoConfig( VrDeviceInfo device );
public static VrStereoConfig loadVrStereoConfig(Arena arena, VrDeviceInfo device );
public static void unloadVrStereoConfig( VrStereoConfig config );
public static Shader loadShader( String vsFileName, String fsFileName );
public static Shader loadShader(Arena arena, String vsFileName, String fsFileName );
public static Shader loadShaderFromMemory( String vsCode, String fsCode );
public static Shader loadShaderFromMemory(Arena arena, String vsCode, String fsCode );
public static boolean isShaderValid( Shader shader );
public static int getShaderLocation( Shader shader, String uniformName );
public static int getShaderLocationAttrib( Shader shader, String attribName );
public static void setShaderValue( Shader shader, int locIndex, MemorySegment value, int uniformType );
public static void setShaderValueV( Shader shader, int locIndex, MemorySegment value, int uniformType, int count );
public static void setShaderValueMatrix( Shader shader, int locIndex, Matrix mat );
public static void setShaderValueTexture( Shader shader, int locIndex, Texture texture );
public static void unloadShader( Shader shader );
public static Ray getScreenToWorldRay( Vector2 position, Camera3D camera );
public static Ray getScreenToWorldRay(Arena arena, Vector2 position, Camera3D camera );
public static Ray getScreenToWorldRayEx( Vector2 position, Camera3D camera, int width, int height );
public static Ray getScreenToWorldRayEx(Arena arena, Vector2 position, Camera3D camera, int width, int height );
public static Vector2 getWorldToScreen( Vector3 position, Camera3D camera );
public static Vector2 getWorldToScreen(Arena arena, Vector3 position, Camera3D camera );
public static Vector2 getWorldToScreenEx( Vector3 position, Camera3D camera, int width, int height );
public static Vector2 getWorldToScreenEx(Arena arena, Vector3 position, Camera3D camera, int width, int height );
public static Vector2 getWorldToScreen2D( Vector2 position, Camera2D camera );
public static Vector2 getWorldToScreen2D(Arena arena, Vector2 position, Camera2D camera );
public static Vector2 getScreenToWorld2D( Vector2 position, Camera2D camera );
public static Vector2 getScreenToWorld2D(Arena arena, Vector2 position, Camera2D camera );
public static Matrix getCameraMatrix( Camera3D camera );
public static Matrix getCameraMatrix(Arena arena, Camera3D camera );
public static Matrix getCameraMatrix2D( Camera2D camera );
public static Matrix getCameraMatrix2D(Arena arena, Camera2D camera );
public static void setTargetFPS( int fps );
public static float getFrameTime( );
public static double getTime( );
public static int getFPS( );
public static void swapScreenBuffer( );
public static void pollInputEvents( );
public static void waitTime( double seconds );
public static void setRandomSeed( int seed );
public static int getRandomValue( int min, int max );
public static void unloadRandomSequence( java.nio.IntBuffer sequence );
public static void takeScreenshot( String fileName );
public static void setConfigFlags( int flags );
public static void openURL( String url );
public static void setTraceLogLevel( int logLevel );
public static MemorySegment memAlloc( int size );
public static MemorySegment memRealloc( MemorySegment ptr, int size );
public static void memFree( MemorySegment ptr );
public static void setTraceLogCallback( MemorySegment callback );
public static void setLoadFileDataCallback( MemorySegment callback );
public static void setSaveFileDataCallback( MemorySegment callback );
public static void setLoadFileTextCallback( MemorySegment callback );
public static void setSaveFileTextCallback( MemorySegment callback );
public static void unloadFileData( java.nio.ByteBuffer data );
public static boolean saveFileData( String fileName, MemorySegment data, int dataSize );
public static boolean exportDataAsCode( java.nio.ByteBuffer data, int dataSize, String fileName );
public static void unloadFileText( java.nio.ByteBuffer text );
public static boolean saveFileText( String fileName, java.nio.ByteBuffer text );
public static boolean fileExists( String fileName );
public static boolean directoryExists( String dirPath );
public static boolean isFileExtension( String fileName, String ext );
public static int getFileLength( String fileName );
public static String getFileExtension( String fileName );
public static String getFileName( String filePath );
public static String getFileNameWithoutExt( String filePath );
public static String getDirectoryPath( String filePath );
public static String getPrevDirectoryPath( String dirPath );
public static String getWorkingDirectory( );
public static String getApplicationDirectory( );
public static int makeDirectory( String dirPath );
public static boolean changeDirectory( String dir );
public static boolean isPathFile( String path );
public static boolean isFileNameValid( String fileName );
public static FilePathList loadDirectoryFiles( String dirPath );
public static FilePathList loadDirectoryFiles(Arena arena, String dirPath );
public static FilePathList loadDirectoryFilesEx( String basePath, String filter, boolean scanSubdirs );
public static FilePathList loadDirectoryFilesEx(Arena arena, String basePath, String filter, boolean scanSubdirs );
public static void unloadDirectoryFiles( FilePathList files );
public static boolean isFileDropped( );
public static FilePathList loadDroppedFiles( );
public static FilePathList loadDroppedFiles(Arena arena );
public static void unloadDroppedFiles( FilePathList files );
public static long getFileModTime( String fileName );
public static int computeCRC32( java.nio.ByteBuffer data, int dataSize );
public static MemorySegment computeMD5( java.nio.ByteBuffer data, int dataSize );
public static MemorySegment computeSHA1( java.nio.ByteBuffer data, int dataSize );
public static AutomationEventList loadAutomationEventList( String fileName );
public static AutomationEventList loadAutomationEventList(Arena arena, String fileName );
public static void unloadAutomationEventList( AutomationEventList list );
public static boolean exportAutomationEventList( AutomationEventList list, String fileName );
public static void setAutomationEventList( AutomationEventList list );
public static void setAutomationEventBaseFrame( int frame );
public static void startAutomationEventRecording( );
public static void stopAutomationEventRecording( );
public static void playAutomationEvent( AutomationEvent event );
public static boolean isKeyPressed( int key );
public static boolean isKeyPressedRepeat( int key );
public static boolean isKeyDown( int key );
public static boolean isKeyReleased( int key );
public static boolean isKeyUp( int key );
public static int getKeyPressed( );
public static int getCharPressed( );
public static void setExitKey( int key );
public static boolean isGamepadAvailable( int gamepad );
public static String getGamepadName( int gamepad );
public static boolean isGamepadButtonPressed( int gamepad, int button );
public static boolean isGamepadButtonDown( int gamepad, int button );
public static boolean isGamepadButtonReleased( int gamepad, int button );
public static boolean isGamepadButtonUp( int gamepad, int button );
public static int getGamepadButtonPressed( );
public static int getGamepadAxisCount( int gamepad );
public static float getGamepadAxisMovement( int gamepad, int axis );
public static int setGamepadMappings( String mappings );
public static void setGamepadVibration( int gamepad, float leftMotor, float rightMotor, float duration );
public static boolean isMouseButtonPressed( int button );
public static boolean isMouseButtonDown( int button );
public static boolean isMouseButtonReleased( int button );
public static boolean isMouseButtonUp( int button );
public static int getMouseX( );
public static int getMouseY( );
public static Vector2 getMousePosition( );
public static Vector2 getMousePosition(Arena arena );
public static Vector2 getMouseDelta( );
public static Vector2 getMouseDelta(Arena arena );
public static void setMousePosition( int x, int y );
public static void setMouseOffset( int offsetX, int offsetY );
public static void setMouseScale( float scaleX, float scaleY );
public static float getMouseWheelMove( );
public static Vector2 getMouseWheelMoveV( );
public static Vector2 getMouseWheelMoveV(Arena arena );
public static void setMouseCursor( int cursor );
public static int getTouchX( );
public static int getTouchY( );
public static Vector2 getTouchPosition( int index );
public static Vector2 getTouchPosition(Arena arena, int index );
public static int getTouchPointId( int index );
public static int getTouchPointCount( );
public static void setGesturesEnabled( int flags );
public static boolean isGestureDetected( int gesture );
public static int getGestureDetected( );
public static float getGestureHoldDuration( );
public static Vector2 getGestureDragVector( );
public static Vector2 getGestureDragVector(Arena arena );
public static float getGestureDragAngle( );
public static Vector2 getGesturePinchVector( );
public static Vector2 getGesturePinchVector(Arena arena );
public static float getGesturePinchAngle( );
public static void updateCamera( Camera3D camera, int mode );
public static void updateCameraPro( Camera3D camera, Vector3 movement, Vector3 rotation, float zoom );
public static void setShapesTexture( Texture texture, Rectangle source );
public static Texture getShapesTexture( );
public static Texture getShapesTexture(Arena arena );
public static Rectangle getShapesTextureRectangle( );
public static Rectangle getShapesTextureRectangle(Arena arena );
public static void drawPixel( int posX, int posY, Color color );
public static void drawPixelV( Vector2 position, Color color );
public static void drawLine( int startPosX, int startPosY, int endPosX, int endPosY, Color color );
public static void drawLineV( Vector2 startPos, Vector2 endPos, Color color );
public static void drawLineEx( Vector2 startPos, Vector2 endPos, float thick, Color color );
public static void drawLineStrip( MemorySegment points, int pointCount, Color color );
public static void drawLineBezier( Vector2 startPos, Vector2 endPos, float thick, Color color );
public static void drawCircle( int centerX, int centerY, float radius, Color color );
public static void drawCircleSector( Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color );
public static void drawCircleSectorLines( Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color );
public static void drawCircleGradient( int centerX, int centerY, float radius, Color inner, Color outer );
public static void drawCircleV( Vector2 center, float radius, Color color );
public static void drawCircleLines( int centerX, int centerY, float radius, Color color );
public static void drawCircleLinesV( Vector2 center, float radius, Color color );
public static void drawEllipse( int centerX, int centerY, float radiusH, float radiusV, Color color );
public static void drawEllipseLines( int centerX, int centerY, float radiusH, float radiusV, Color color );
public static void drawRing( Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color );
public static void drawRingLines( Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color );
public static void drawRectangle( int posX, int posY, int width, int height, Color color );
public static void drawRectangleV( Vector2 position, Vector2 size, Color color );
public static void drawRectangleRec( Rectangle rec, Color color );
public static void drawRectanglePro( Rectangle rec, Vector2 origin, float rotation, Color color );
public static void drawRectangleGradientV( int posX, int posY, int width, int height, Color top, Color bottom );
public static void drawRectangleGradientH( int posX, int posY, int width, int height, Color left, Color right );
public static void drawRectangleGradientEx( Rectangle rec, Color topLeft, Color bottomLeft, Color topRight, Color bottomRight );
public static void drawRectangleLines( int posX, int posY, int width, int height, Color color );
public static void drawRectangleLinesEx( Rectangle rec, float lineThick, Color color );
public static void drawRectangleRounded( Rectangle rec, float roundness, int segments, Color color );
public static void drawRectangleRoundedLines( Rectangle rec, float roundness, int segments, Color color );
public static void drawRectangleRoundedLinesEx( Rectangle rec, float roundness, int segments, float lineThick, Color color );
public static void drawTriangle( Vector2 v1, Vector2 v2, Vector2 v3, Color color );
public static void drawTriangleLines( Vector2 v1, Vector2 v2, Vector2 v3, Color color );
public static void drawTriangleFan( MemorySegment points, int pointCount, Color color );
public static void drawTriangleStrip( MemorySegment points, int pointCount, Color color );
public static void drawPoly( Vector2 center, int sides, float radius, float rotation, Color color );
public static void drawPolyLines( Vector2 center, int sides, float radius, float rotation, Color color );
public static void drawPolyLinesEx( Vector2 center, int sides, float radius, float rotation, float lineThick, Color color );
public static void drawSplineLinear( MemorySegment points, int pointCount, float thick, Color color );
public static void drawSplineBasis( MemorySegment points, int pointCount, float thick, Color color );
public static void drawSplineCatmullRom( MemorySegment points, int pointCount, float thick, Color color );
public static void drawSplineBezierQuadratic( MemorySegment points, int pointCount, float thick, Color color );
public static void drawSplineBezierCubic( MemorySegment points, int pointCount, float thick, Color color );
public static void drawSplineSegmentLinear( Vector2 p1, Vector2 p2, float thick, Color color );
public static void drawSplineSegmentBasis( Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color );
public static void drawSplineSegmentCatmullRom( Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color );
public static void drawSplineSegmentBezierQuadratic( Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color );
public static void drawSplineSegmentBezierCubic( Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color );
public static Vector2 getSplinePointLinear( Vector2 startPos, Vector2 endPos, float t );
public static Vector2 getSplinePointLinear(Arena arena, Vector2 startPos, Vector2 endPos, float t );
public static Vector2 getSplinePointBasis( Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t );
public static Vector2 getSplinePointBasis(Arena arena, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t );
public static Vector2 getSplinePointCatmullRom( Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t );
public static Vector2 getSplinePointCatmullRom(Arena arena, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t );
public static Vector2 getSplinePointBezierQuad( Vector2 p1, Vector2 c2, Vector2 p3, float t );
public static Vector2 getSplinePointBezierQuad(Arena arena, Vector2 p1, Vector2 c2, Vector2 p3, float t );
public static Vector2 getSplinePointBezierCubic( Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t );
public static Vector2 getSplinePointBezierCubic(Arena arena, Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t );
public static boolean checkCollisionRecs( Rectangle rec1, Rectangle rec2 );
public static boolean checkCollisionCircles( Vector2 center1, float radius1, Vector2 center2, float radius2 );
public static boolean checkCollisionCircleRec( Vector2 center, float radius, Rectangle rec );
public static boolean checkCollisionCircleLine( Vector2 center, float radius, Vector2 p1, Vector2 p2 );
public static boolean checkCollisionPointRec( Vector2 point, Rectangle rec );
public static boolean checkCollisionPointCircle( Vector2 point, Vector2 center, float radius );
public static boolean checkCollisionPointTriangle( Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3 );
public static boolean checkCollisionPointLine( Vector2 point, Vector2 p1, Vector2 p2, int threshold );
public static boolean checkCollisionPointPoly( Vector2 point, MemorySegment points, int pointCount );
public static boolean checkCollisionLines( Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 collisionPoint );
public static Rectangle getCollisionRec( Rectangle rec1, Rectangle rec2 );
public static Rectangle getCollisionRec(Arena arena, Rectangle rec1, Rectangle rec2 );
public static Image loadImage( String fileName );
public static Image loadImage(Arena arena, String fileName );
public static Image loadImageRaw( String fileName, int width, int height, int format, int headerSize );
public static Image loadImageRaw(Arena arena, String fileName, int width, int height, int format, int headerSize );
public static Image loadImageAnim( String fileName, java.nio.IntBuffer frames );
public static Image loadImageAnim(Arena arena, String fileName, java.nio.IntBuffer frames );
public static Image loadImageAnimFromMemory( String fileType, java.nio.ByteBuffer fileData, int dataSize, java.nio.IntBuffer frames );
public static Image loadImageAnimFromMemory(Arena arena, String fileType, java.nio.ByteBuffer fileData, int dataSize, java.nio.IntBuffer frames );
public static Image loadImageFromMemory( String fileType, java.nio.ByteBuffer fileData, int dataSize );
public static Image loadImageFromMemory(Arena arena, String fileType, java.nio.ByteBuffer fileData, int dataSize );
public static Image loadImageFromTexture( Texture texture );
public static Image loadImageFromTexture(Arena arena, Texture texture );
public static Image loadImageFromScreen( );
public static Image loadImageFromScreen(Arena arena );
public static boolean isImageValid( Image image );
public static void unloadImage( Image image );
public static boolean exportImage( Image image, String fileName );
public static boolean exportImageAsCode( Image image, String fileName );
public static Image genImageColor( int width, int height, Color color );
public static Image genImageColor(Arena arena, int width, int height, Color color );
public static Image genImageGradientLinear( int width, int height, int direction, Color start, Color end );
public static Image genImageGradientLinear(Arena arena, int width, int height, int direction, Color start, Color end );
public static Image genImageGradientRadial( int width, int height, float density, Color inner, Color outer );
public static Image genImageGradientRadial(Arena arena, int width, int height, float density, Color inner, Color outer );
public static Image genImageGradientSquare( int width, int height, float density, Color inner, Color outer );
public static Image genImageGradientSquare(Arena arena, int width, int height, float density, Color inner, Color outer );
public static Image genImageChecked( int width, int height, int checksX, int checksY, Color col1, Color col2 );
public static Image genImageChecked(Arena arena, int width, int height, int checksX, int checksY, Color col1, Color col2 );
public static Image genImageWhiteNoise( int width, int height, float factor );
public static Image genImageWhiteNoise(Arena arena, int width, int height, float factor );
public static Image genImagePerlinNoise( int width, int height, int offsetX, int offsetY, float scale );
public static Image genImagePerlinNoise(Arena arena, int width, int height, int offsetX, int offsetY, float scale );
public static Image genImageCellular( int width, int height, int tileSize );
public static Image genImageCellular(Arena arena, int width, int height, int tileSize );
public static Image genImageText( int width, int height, String text );
public static Image genImageText(Arena arena, int width, int height, String text );
public static Image imageCopy( Image image );
public static Image imageCopy(Arena arena, Image image );
public static Image imageFromImage( Image image, Rectangle rec );
public static Image imageFromImage(Arena arena, Image image, Rectangle rec );
public static Image imageFromChannel( Image image, int selectedChannel );
public static Image imageFromChannel(Arena arena, Image image, int selectedChannel );
public static Image imageText( String text, int fontSize, Color color );
public static Image imageText(Arena arena, String text, int fontSize, Color color );
public static Image imageTextEx( Font font, String text, float fontSize, float spacing, Color tint );
public static Image imageTextEx(Arena arena, Font font, String text, float fontSize, float spacing, Color tint );
public static void imageFormat( Image image, int newFormat );
public static void imageToPOT( Image image, Color fill );
public static void imageCrop( Image image, Rectangle crop );
public static void imageAlphaCrop( Image image, float threshold );
public static void imageAlphaClear( Image image, Color color, float threshold );
public static void imageAlphaMask( Image image, Image alphaMask );
public static void imageAlphaPremultiply( Image image );
public static void imageBlurGaussian( Image image, int blurSize );
public static void imageKernelConvolution( Image image, MemorySegment kernel, int kernelSize );
public static void imageResize( Image image, int newWidth, int newHeight );
public static void imageResizeNN( Image image, int newWidth, int newHeight );
public static void imageResizeCanvas( Image image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill );
public static void imageMipmaps( Image image );
public static void imageDither( Image image, int rBpp, int gBpp, int bBpp, int aBpp );
public static void imageFlipVertical( Image image );
public static void imageFlipHorizontal( Image image );
public static void imageRotate( Image image, int degrees );
public static void imageRotateCW( Image image );
public static void imageRotateCCW( Image image );
public static void imageColorTint( Image image, Color color );
public static void imageColorInvert( Image image );
public static void imageColorGrayscale( Image image );
public static void imageColorContrast( Image image, float contrast );
public static void imageColorBrightness( Image image, int brightness );
public static void imageColorReplace( Image image, Color color, Color replace );
public static Color loadImageColors( Image image );
public static Color loadImagePalette( Image image, int maxPaletteSize, java.nio.IntBuffer colorCount );
public static void unloadImageColors( Color colors );
public static void unloadImagePalette( Color colors );
public static Rectangle getImageAlphaBorder( Image image, float threshold );
public static Rectangle getImageAlphaBorder(Arena arena, Image image, float threshold );
public static Color getImageColor( Image image, int x, int y );
public static Color getImageColor(Arena arena, Image image, int x, int y );
public static void imageClearBackground( Image dst, Color color );
public static void imageDrawPixel( Image dst, int posX, int posY, Color color );
public static void imageDrawPixelV( Image dst, Vector2 position, Color color );
public static void imageDrawLine( Image dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color );
public static void imageDrawLineV( Image dst, Vector2 start, Vector2 end, Color color );
public static void imageDrawLineEx( Image dst, Vector2 start, Vector2 end, int thick, Color color );
public static void imageDrawCircle( Image dst, int centerX, int centerY, int radius, Color color );
public static void imageDrawCircleV( Image dst, Vector2 center, int radius, Color color );
public static void imageDrawCircleLines( Image dst, int centerX, int centerY, int radius, Color color );
public static void imageDrawCircleLinesV( Image dst, Vector2 center, int radius, Color color );
public static void imageDrawRectangle( Image dst, int posX, int posY, int width, int height, Color color );
public static void imageDrawRectangleV( Image dst, Vector2 position, Vector2 size, Color color );
public static void imageDrawRectangleRec( Image dst, Rectangle rec, Color color );
public static void imageDrawRectangleLines( Image dst, Rectangle rec, int thick, Color color );
public static void imageDrawTriangle( Image dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color );
public static void imageDrawTriangleEx( Image dst, Vector2 v1, Vector2 v2, Vector2 v3, Color c1, Color c2, Color c3 );
public static void imageDrawTriangleLines( Image dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color );
public static void imageDrawTriangleFan( Image dst, Vector2 points, int pointCount, Color color );
public static void imageDrawTriangleStrip( Image dst, Vector2 points, int pointCount, Color color );
public static void imageDraw( Image dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint );
public static void imageDrawText( Image dst, String text, int posX, int posY, int fontSize, Color color );
public static void imageDrawTextEx( Image dst, Font font, String text, Vector2 position, float fontSize, float spacing, Color tint );
public static Texture loadTexture( String fileName );
public static Texture loadTexture(Arena arena, String fileName );
public static Texture loadTextureFromImage( Image image );
public static Texture loadTextureFromImage(Arena arena, Image image );
public static Texture loadTextureCubemap( Image image, int layout );
public static Texture loadTextureCubemap(Arena arena, Image image, int layout );
public static RenderTexture loadRenderTexture( int width, int height );
public static RenderTexture loadRenderTexture(Arena arena, int width, int height );
public static boolean isTextureValid( Texture texture );
public static void unloadTexture( Texture texture );
public static boolean isRenderTextureValid( RenderTexture target );
public static void unloadRenderTexture( RenderTexture target );
public static void updateTexture( Texture texture, MemorySegment pixels );
public static void updateTextureRec( Texture texture, Rectangle rec, MemorySegment pixels );
public static void genTextureMipmaps( Texture texture );
public static void setTextureFilter( Texture texture, int filter );
public static void setTextureWrap( Texture texture, int wrap );
public static void drawTexture( Texture texture, int posX, int posY, Color tint );
public static void drawTextureV( Texture texture, Vector2 position, Color tint );
public static void drawTextureEx( Texture texture, Vector2 position, float rotation, float scale, Color tint );
public static void drawTextureRec( Texture texture, Rectangle source, Vector2 position, Color tint );
public static void drawTexturePro( Texture texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint );
public static void drawTextureNPatch( Texture texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint );
public static boolean colorIsEqual( Color col1, Color col2 );
public static Color fade( Color color, float alpha );
public static Color fade(Arena arena, Color color, float alpha );
public static int colorToInt( Color color );
public static Vector4 colorNormalize( Color color );
public static Vector4 colorNormalize(Arena arena, Color color );
public static Color colorFromNormalized( Vector4 normalized );
public static Color colorFromNormalized(Arena arena, Vector4 normalized );
public static Vector3 colorToHSV( Color color );
public static Vector3 colorToHSV(Arena arena, Color color );
public static Color colorFromHSV( float hue, float saturation, float value );
public static Color colorFromHSV(Arena arena, float hue, float saturation, float value );
public static Color colorTint( Color color, Color tint );
public static Color colorTint(Arena arena, Color color, Color tint );
public static Color colorBrightness( Color color, float factor );
public static Color colorBrightness(Arena arena, Color color, float factor );
public static Color colorContrast( Color color, float contrast );
public static Color colorContrast(Arena arena, Color color, float contrast );
public static Color colorAlpha( Color color, float alpha );
public static Color colorAlpha(Arena arena, Color color, float alpha );
public static Color colorAlphaBlend( Color dst, Color src, Color tint );
public static Color colorAlphaBlend(Arena arena, Color dst, Color src, Color tint );
public static Color colorLerp( Color color1, Color color2, float factor );
public static Color colorLerp(Arena arena, Color color1, Color color2, float factor );
public static Color getColor( int hexValue );
public static Color getColor(Arena arena, int hexValue );
public static Color getPixelColor( MemorySegment srcPtr, int format );
public static Color getPixelColor(Arena arena, MemorySegment srcPtr, int format );
public static void setPixelColor( MemorySegment dstPtr, Color color, int format );
public static int getPixelDataSize( int width, int height, int format );
public static Font getFontDefault( );
public static Font getFontDefault(Arena arena );
public static Font loadFont( String fileName );
public static Font loadFont(Arena arena, String fileName );
public static Font loadFontEx( String fileName, int fontSize, java.nio.IntBuffer codepoints, int codepointCount );
public static Font loadFontEx(Arena arena, String fileName, int fontSize, java.nio.IntBuffer codepoints, int codepointCount );
public static Font loadFontFromImage( Image image, Color key, int firstChar );
public static Font loadFontFromImage(Arena arena, Image image, Color key, int firstChar );
public static Font loadFontFromMemory( String fileType, java.nio.ByteBuffer fileData, int dataSize, int fontSize, java.nio.IntBuffer codepoints, int codepointCount );
public static Font loadFontFromMemory(Arena arena, String fileType, java.nio.ByteBuffer fileData, int dataSize, int fontSize, java.nio.IntBuffer codepoints, int codepointCount );
public static boolean isFontValid( Font font );
public static GlyphInfo loadFontData( java.nio.ByteBuffer fileData, int dataSize, int fontSize, java.nio.IntBuffer codepoints, int codepointCount, int type );
public static Image genImageFontAtlas( MemorySegment glyphs, MemorySegment glyphRecs, int glyphCount, int fontSize, int padding, int packMethod );
public static Image genImageFontAtlas(Arena arena, MemorySegment glyphs, MemorySegment glyphRecs, int glyphCount, int fontSize, int padding, int packMethod );
public static void unloadFontData( GlyphInfo glyphs, int glyphCount );
public static void unloadFont( Font font );
public static boolean exportFontAsCode( Font font, String fileName );
public static void drawFPS( int posX, int posY );
public static void drawText( String text, int posX, int posY, int fontSize, Color color );
public static void drawTextEx( Font font, String text, Vector2 position, float fontSize, float spacing, Color tint );
public static void drawTextPro( Font font, String text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint );
public static void drawTextCodepoint( Font font, int codepoint, Vector2 position, float fontSize, Color tint );
public static void drawTextCodepoints( Font font, MemorySegment codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint );
public static void setTextLineSpacing( int spacing );
public static int measureText( String text, int fontSize );
public static Vector2 measureTextEx( Font font, String text, float fontSize, float spacing );
public static Vector2 measureTextEx(Arena arena, Font font, String text, float fontSize, float spacing );
public static int getGlyphIndex( Font font, int codepoint );
public static GlyphInfo getGlyphInfo( Font font, int codepoint );
public static GlyphInfo getGlyphInfo(Arena arena, Font font, int codepoint );
public static Rectangle getGlyphAtlasRec( Font font, int codepoint );
public static Rectangle getGlyphAtlasRec(Arena arena, Font font, int codepoint );
public static void unloadUTF8( java.nio.ByteBuffer text );
public static void unloadCodepoints( java.nio.IntBuffer codepoints );
public static int getCodepointCount( String text );
public static int getCodepoint( String text, java.nio.IntBuffer codepointSize );
public static int getCodepointNext( String text, java.nio.IntBuffer codepointSize );
public static int getCodepointPrevious( String text, java.nio.IntBuffer codepointSize );
public static String codepointToUTF8( int codepoint, java.nio.IntBuffer utf8Size );
public static int textCopy( java.nio.ByteBuffer dst, String src );
public static boolean textIsEqual( String text1, String text2 );
public static int textLength( String text );
public static String textSubtext( String text, int position, int length );
public static String textJoin( MemorySegment textList, int count, String delimiter );
public static MemorySegment textSplit( String text, byte delimiter, java.nio.IntBuffer count );
public static void textAppend( java.nio.ByteBuffer text, String append, java.nio.IntBuffer position );
public static int textFindIndex( String text, String find );
public static String textToUpper( String text );
public static String textToLower( String text );
public static String textToPascal( String text );
public static String textToSnake( String text );
public static String textToCamel( String text );
public static int textToInteger( String text );
public static float textToFloat( String text );
public static void drawLine3D( Vector3 startPos, Vector3 endPos, Color color );
public static void drawPoint3D( Vector3 position, Color color );
public static void drawCircle3D( Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color );
public static void drawTriangle3D( Vector3 v1, Vector3 v2, Vector3 v3, Color color );
public static void drawTriangleStrip3D( MemorySegment points, int pointCount, Color color );
public static void drawCube( Vector3 position, float width, float height, float length, Color color );
public static void drawCubeV( Vector3 position, Vector3 size, Color color );
public static void drawCubeWires( Vector3 position, float width, float height, float length, Color color );
public static void drawCubeWiresV( Vector3 position, Vector3 size, Color color );
public static void drawSphere( Vector3 centerPos, float radius, Color color );
public static void drawSphereEx( Vector3 centerPos, float radius, int rings, int slices, Color color );
public static void drawSphereWires( Vector3 centerPos, float radius, int rings, int slices, Color color );
public static void drawCylinder( Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color );
public static void drawCylinderEx( Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color );
public static void drawCylinderWires( Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color );
public static void drawCylinderWiresEx( Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color );
public static void drawCapsule( Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color );
public static void drawCapsuleWires( Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color );
public static void drawPlane( Vector3 centerPos, Vector2 size, Color color );
public static void drawRay( Ray ray, Color color );
public static void drawGrid( int slices, float spacing );
public static Model loadModel( String fileName );
public static Model loadModel(Arena arena, String fileName );
public static Model loadModelFromMesh( Mesh mesh );
public static Model loadModelFromMesh(Arena arena, Mesh mesh );
public static boolean isModelValid( Model model );
public static void unloadModel( Model model );
public static BoundingBox getModelBoundingBox( Model model );
public static BoundingBox getModelBoundingBox(Arena arena, Model model );
public static void drawModel( Model model, Vector3 position, float scale, Color tint );
public static void drawModelEx( Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint );
public static void drawModelWires( Model model, Vector3 position, float scale, Color tint );
public static void drawModelWiresEx( Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint );
public static void drawModelPoints( Model model, Vector3 position, float scale, Color tint );
public static void drawModelPointsEx( Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint );
public static void drawBoundingBox( BoundingBox box, Color color );
public static void drawBillboard( Camera3D camera, Texture texture, Vector3 position, float scale, Color tint );
public static void drawBillboardRec( Camera3D camera, Texture texture, Rectangle source, Vector3 position, Vector2 size, Color tint );
public static void drawBillboardPro( Camera3D camera, Texture texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint );
public static void uploadMesh( Mesh mesh, boolean dynamic );
public static void updateMeshBuffer( Mesh mesh, int index, MemorySegment data, int dataSize, int offset );
public static void unloadMesh( Mesh mesh );
public static void drawMesh( Mesh mesh, Material material, Matrix transform );
public static void drawMeshInstanced( Mesh mesh, Material material, MemorySegment transforms, int instances );
public static BoundingBox getMeshBoundingBox( Mesh mesh );
public static BoundingBox getMeshBoundingBox(Arena arena, Mesh mesh );
public static void genMeshTangents( Mesh mesh );
public static boolean exportMesh( Mesh mesh, String fileName );
public static boolean exportMeshAsCode( Mesh mesh, String fileName );
public static Mesh genMeshPoly( int sides, float radius );
public static Mesh genMeshPoly(Arena arena, int sides, float radius );
public static Mesh genMeshPlane( float width, float length, int resX, int resZ );
public static Mesh genMeshPlane(Arena arena, float width, float length, int resX, int resZ );
public static Mesh genMeshCube( float width, float height, float length );
public static Mesh genMeshCube(Arena arena, float width, float height, float length );
public static Mesh genMeshSphere( float radius, int rings, int slices );
public static Mesh genMeshSphere(Arena arena, float radius, int rings, int slices );
public static Mesh genMeshHemiSphere( float radius, int rings, int slices );
public static Mesh genMeshHemiSphere(Arena arena, float radius, int rings, int slices );
public static Mesh genMeshCylinder( float radius, float height, int slices );
public static Mesh genMeshCylinder(Arena arena, float radius, float height, int slices );
public static Mesh genMeshCone( float radius, float height, int slices );
public static Mesh genMeshCone(Arena arena, float radius, float height, int slices );
public static Mesh genMeshTorus( float radius, float size, int radSeg, int sides );
public static Mesh genMeshTorus(Arena arena, float radius, float size, int radSeg, int sides );
public static Mesh genMeshKnot( float radius, float size, int radSeg, int sides );
public static Mesh genMeshKnot(Arena arena, float radius, float size, int radSeg, int sides );
public static Mesh genMeshHeightmap( Image heightmap, Vector3 size );
public static Mesh genMeshHeightmap(Arena arena, Image heightmap, Vector3 size );
public static Mesh genMeshCubicmap( Image cubicmap, Vector3 cubeSize );
public static Mesh genMeshCubicmap(Arena arena, Image cubicmap, Vector3 cubeSize );
public static Material loadMaterials( String fileName, java.nio.IntBuffer materialCount );
public static Material loadMaterialDefault( );
public static Material loadMaterialDefault(Arena arena );
public static boolean isMaterialValid( Material material );
public static void unloadMaterial( Material material );
public static void setMaterialTexture( Material material, int mapType, Texture texture );
public static void setModelMeshMaterial( Model model, int meshId, int materialId );
public static ModelAnimation loadModelAnimations( String fileName, java.nio.IntBuffer animCount );
public static void updateModelAnimation( Model model, ModelAnimation anim, int frame );
public static void updateModelAnimationBones( Model model, ModelAnimation anim, int frame );
public static void unloadModelAnimation( ModelAnimation anim );
public static void unloadModelAnimations( ModelAnimation animations, int animCount );
public static boolean isModelAnimationValid( Model model, ModelAnimation anim );
public static boolean checkCollisionSpheres( Vector3 center1, float radius1, Vector3 center2, float radius2 );
public static boolean checkCollisionBoxes( BoundingBox box1, BoundingBox box2 );
public static boolean checkCollisionBoxSphere( BoundingBox box, Vector3 center, float radius );
public static RayCollision getRayCollisionSphere( Ray ray, Vector3 center, float radius );
public static RayCollision getRayCollisionSphere(Arena arena, Ray ray, Vector3 center, float radius );
public static RayCollision getRayCollisionBox( Ray ray, BoundingBox box );
public static RayCollision getRayCollisionBox(Arena arena, Ray ray, BoundingBox box );
public static RayCollision getRayCollisionMesh( Ray ray, Mesh mesh, Matrix transform );
public static RayCollision getRayCollisionMesh(Arena arena, Ray ray, Mesh mesh, Matrix transform );
public static RayCollision getRayCollisionTriangle( Ray ray, Vector3 p1, Vector3 p2, Vector3 p3 );
public static RayCollision getRayCollisionTriangle(Arena arena, Ray ray, Vector3 p1, Vector3 p2, Vector3 p3 );
public static RayCollision getRayCollisionQuad( Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4 );
public static RayCollision getRayCollisionQuad(Arena arena, Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4 );
public static void initAudioDevice( );
public static void closeAudioDevice( );
public static boolean isAudioDeviceReady( );
public static void setMasterVolume( float volume );
public static float getMasterVolume( );
public static Wave loadWave( String fileName );
public static Wave loadWave(Arena arena, String fileName );
public static Wave loadWaveFromMemory( String fileType, java.nio.ByteBuffer fileData, int dataSize );
public static Wave loadWaveFromMemory(Arena arena, String fileType, java.nio.ByteBuffer fileData, int dataSize );
public static boolean isWaveValid( Wave wave );
public static Sound loadSound( String fileName );
public static Sound loadSound(Arena arena, String fileName );
public static Sound loadSoundFromWave( Wave wave );
public static Sound loadSoundFromWave(Arena arena, Wave wave );
public static Sound loadSoundAlias( Sound source );
public static Sound loadSoundAlias(Arena arena, Sound source );
public static boolean isSoundValid( Sound sound );
public static void updateSound( Sound sound, MemorySegment data, int sampleCount );
public static void unloadWave( Wave wave );
public static void unloadSound( Sound sound );
public static void unloadSoundAlias( Sound alias );
public static boolean exportWave( Wave wave, String fileName );
public static boolean exportWaveAsCode( Wave wave, String fileName );
public static void playSound( Sound sound );
public static void stopSound( Sound sound );
public static void pauseSound( Sound sound );
public static void resumeSound( Sound sound );
public static boolean isSoundPlaying( Sound sound );
public static void setSoundVolume( Sound sound, float volume );
public static void setSoundPitch( Sound sound, float pitch );
public static void setSoundPan( Sound sound, float pan );
public static Wave waveCopy( Wave wave );
public static Wave waveCopy(Arena arena, Wave wave );
public static void waveCrop( Wave wave, int initFrame, int finalFrame );
public static void waveFormat( Wave wave, int sampleRate, int sampleSize, int channels );
public static void unloadWaveSamples( java.nio.FloatBuffer samples );
public static Music loadMusicStream( String fileName );
public static Music loadMusicStream(Arena arena, String fileName );
public static Music loadMusicStreamFromMemory( String fileType, java.nio.ByteBuffer data, int dataSize );
public static Music loadMusicStreamFromMemory(Arena arena, String fileType, java.nio.ByteBuffer data, int dataSize );
public static boolean isMusicValid( Music music );
public static void unloadMusicStream( Music music );
public static void playMusicStream( Music music );
public static boolean isMusicStreamPlaying( Music music );
public static void updateMusicStream( Music music );
public static void stopMusicStream( Music music );
public static void pauseMusicStream( Music music );
public static void resumeMusicStream( Music music );
public static void seekMusicStream( Music music, float position );
public static void setMusicVolume( Music music, float volume );
public static void setMusicPitch( Music music, float pitch );
public static void setMusicPan( Music music, float pan );
public static float getMusicTimeLength( Music music );
public static float getMusicTimePlayed( Music music );
public static AudioStream loadAudioStream( int sampleRate, int sampleSize, int channels );
public static AudioStream loadAudioStream(Arena arena, int sampleRate, int sampleSize, int channels );
public static boolean isAudioStreamValid( AudioStream stream );
public static void unloadAudioStream( AudioStream stream );
public static void updateAudioStream( AudioStream stream, MemorySegment data, int frameCount );
public static boolean isAudioStreamProcessed( AudioStream stream );
public static void playAudioStream( AudioStream stream );
public static void pauseAudioStream( AudioStream stream );
public static void resumeAudioStream( AudioStream stream );
public static boolean isAudioStreamPlaying( AudioStream stream );
public static void stopAudioStream( AudioStream stream );
public static void setAudioStreamVolume( AudioStream stream, float volume );
public static void setAudioStreamPitch( AudioStream stream, float pitch );
public static void setAudioStreamPan( AudioStream stream, float pan );
public static void setAudioStreamBufferSizeDefault( int size );
public static void setAudioStreamCallback( AudioStream stream, MemorySegment callback );
public static void attachAudioStreamProcessor( AudioStream stream, MemorySegment processor );
public static void detachAudioStreamProcessor( AudioStream stream, MemorySegment processor );
public static void attachAudioMixedProcessor( MemorySegment processor );
public static void detachAudioMixedProcessor( MemorySegment processor );
public static float clamp( float value, float min, float max );
public static float lerp( float start, float end, float amount );
public static float normalize( float value, float start, float end );
public static float remap( float value, float inputStart, float inputEnd, float outputStart, float outputEnd );
public static float wrap( float value, float min, float max );
public static int floatEquals( float x, float y );
public static Vector2 vector2Zero( );
public static Vector2 vector2Zero(Arena arena );
public static Vector2 vector2One( );
public static Vector2 vector2One(Arena arena );
public static Vector2 vector2Add( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Add(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2AddValue( Vector2 v, float add );
public static Vector2 vector2AddValue(Arena arena, Vector2 v, float add );
public static Vector2 vector2Subtract( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Subtract(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2SubtractValue( Vector2 v, float sub );
public static Vector2 vector2SubtractValue(Arena arena, Vector2 v, float sub );
public static float vector2Length( Vector2 v );
public static float vector2LengthSqr( Vector2 v );
public static float vector2DotProduct( Vector2 v1, Vector2 v2 );
public static float vector2Distance( Vector2 v1, Vector2 v2 );
public static float vector2DistanceSqr( Vector2 v1, Vector2 v2 );
public static float vector2Angle( Vector2 v1, Vector2 v2 );
public static float vector2LineAngle( Vector2 start, Vector2 end );
public static Vector2 vector2Scale( Vector2 v, float scale );
public static Vector2 vector2Scale(Arena arena, Vector2 v, float scale );
public static Vector2 vector2Multiply( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Multiply(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2Negate( Vector2 v );
public static Vector2 vector2Negate(Arena arena, Vector2 v );
public static Vector2 vector2Divide( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Divide(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2Normalize( Vector2 v );
public static Vector2 vector2Normalize(Arena arena, Vector2 v );
public static Vector2 vector2Transform( Vector2 v, Matrix mat );
public static Vector2 vector2Transform(Arena arena, Vector2 v, Matrix mat );
public static Vector2 vector2Lerp( Vector2 v1, Vector2 v2, float amount );
public static Vector2 vector2Lerp(Arena arena, Vector2 v1, Vector2 v2, float amount );
public static Vector2 vector2Reflect( Vector2 v, Vector2 normal );
public static Vector2 vector2Reflect(Arena arena, Vector2 v, Vector2 normal );
public static Vector2 vector2Min( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Min(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2Max( Vector2 v1, Vector2 v2 );
public static Vector2 vector2Max(Arena arena, Vector2 v1, Vector2 v2 );
public static Vector2 vector2Rotate( Vector2 v, float angle );
public static Vector2 vector2Rotate(Arena arena, Vector2 v, float angle );
public static Vector2 vector2MoveTowards( Vector2 v, Vector2 target, float maxDistance );
public static Vector2 vector2MoveTowards(Arena arena, Vector2 v, Vector2 target, float maxDistance );
public static Vector2 vector2Invert( Vector2 v );
public static Vector2 vector2Invert(Arena arena, Vector2 v );
public static Vector2 vector2Clamp( Vector2 v, Vector2 min, Vector2 max );
public static Vector2 vector2Clamp(Arena arena, Vector2 v, Vector2 min, Vector2 max );
public static Vector2 vector2ClampValue( Vector2 v, float min, float max );
public static Vector2 vector2ClampValue(Arena arena, Vector2 v, float min, float max );
public static int vector2Equals( Vector2 p, Vector2 q );
public static Vector2 vector2Refract( Vector2 v, Vector2 n, float r );
public static Vector2 vector2Refract(Arena arena, Vector2 v, Vector2 n, float r );
public static Vector3 vector3Zero( );
public static Vector3 vector3Zero(Arena arena );
public static Vector3 vector3One( );
public static Vector3 vector3One(Arena arena );
public static Vector3 vector3Add( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Add(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3AddValue( Vector3 v, float add );
public static Vector3 vector3AddValue(Arena arena, Vector3 v, float add );
public static Vector3 vector3Subtract( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Subtract(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3SubtractValue( Vector3 v, float sub );
public static Vector3 vector3SubtractValue(Arena arena, Vector3 v, float sub );
public static Vector3 vector3Scale( Vector3 v, float scalar );
public static Vector3 vector3Scale(Arena arena, Vector3 v, float scalar );
public static Vector3 vector3Multiply( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Multiply(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3CrossProduct( Vector3 v1, Vector3 v2 );
public static Vector3 vector3CrossProduct(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3Perpendicular( Vector3 v );
public static Vector3 vector3Perpendicular(Arena arena, Vector3 v );
public static float vector3Length( MemorySegment v );
public static float vector3LengthSqr( MemorySegment v );
public static float vector3DotProduct( Vector3 v1, Vector3 v2 );
public static float vector3Distance( Vector3 v1, Vector3 v2 );
public static float vector3DistanceSqr( Vector3 v1, Vector3 v2 );
public static float vector3Angle( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Negate( Vector3 v );
public static Vector3 vector3Negate(Arena arena, Vector3 v );
public static Vector3 vector3Divide( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Divide(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3Normalize( Vector3 v );
public static Vector3 vector3Normalize(Arena arena, Vector3 v );
public static Vector3 vector3Project( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Project(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3Reject( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Reject(Arena arena, Vector3 v1, Vector3 v2 );
public static void vector3OrthoNormalize( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Transform( Vector3 v, Matrix mat );
public static Vector3 vector3Transform(Arena arena, Vector3 v, Matrix mat );
public static Vector3 vector3RotateByQuaternion( Vector3 v, Vector4 q );
public static Vector3 vector3RotateByQuaternion(Arena arena, Vector3 v, Vector4 q );
public static Vector3 vector3RotateByAxisAngle( Vector3 v, Vector3 axis, float angle );
public static Vector3 vector3RotateByAxisAngle(Arena arena, Vector3 v, Vector3 axis, float angle );
public static Vector3 vector3MoveTowards( Vector3 v, Vector3 target, float maxDistance );
public static Vector3 vector3MoveTowards(Arena arena, Vector3 v, Vector3 target, float maxDistance );
public static Vector3 vector3Lerp( Vector3 v1, Vector3 v2, float amount );
public static Vector3 vector3Lerp(Arena arena, Vector3 v1, Vector3 v2, float amount );
public static Vector3 vector3CubicHermite( Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, float amount );
public static Vector3 vector3CubicHermite(Arena arena, Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, float amount );
public static Vector3 vector3Reflect( Vector3 v, Vector3 normal );
public static Vector3 vector3Reflect(Arena arena, Vector3 v, Vector3 normal );
public static Vector3 vector3Min( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Min(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3Max( Vector3 v1, Vector3 v2 );
public static Vector3 vector3Max(Arena arena, Vector3 v1, Vector3 v2 );
public static Vector3 vector3Barycenter( Vector3 p, Vector3 a, Vector3 b, Vector3 c );
public static Vector3 vector3Barycenter(Arena arena, Vector3 p, Vector3 a, Vector3 b, Vector3 c );
public static Vector3 vector3Unproject( Vector3 source, Matrix projection, Matrix view );
public static Vector3 vector3Unproject(Arena arena, Vector3 source, Matrix projection, Matrix view );
public static MemorySegment vector3ToFloatV( Vector3 v );
public static MemorySegment vector3ToFloatV(Arena arena, Vector3 v );
public static Vector3 vector3Invert( Vector3 v );
public static Vector3 vector3Invert(Arena arena, Vector3 v );
public static Vector3 vector3Clamp( Vector3 v, Vector3 min, Vector3 max );
public static Vector3 vector3Clamp(Arena arena, Vector3 v, Vector3 min, Vector3 max );
public static Vector3 vector3ClampValue( Vector3 v, float min, float max );
public static Vector3 vector3ClampValue(Arena arena, Vector3 v, float min, float max );
public static int vector3Equals( Vector3 p, Vector3 q );
public static Vector3 vector3Refract( Vector3 v, Vector3 n, float r );
public static Vector3 vector3Refract(Arena arena, Vector3 v, Vector3 n, float r );
public static Vector4 vector4Zero( );
public static Vector4 vector4Zero(Arena arena );
public static Vector4 vector4One( );
public static Vector4 vector4One(Arena arena );
public static Vector4 vector4Add( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Add(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4AddValue( Vector4 v, float add );
public static Vector4 vector4AddValue(Arena arena, Vector4 v, float add );
public static Vector4 vector4Subtract( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Subtract(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4SubtractValue( Vector4 v, float add );
public static Vector4 vector4SubtractValue(Arena arena, Vector4 v, float add );
public static float vector4Length( Vector4 v );
public static float vector4LengthSqr( Vector4 v );
public static float vector4DotProduct( Vector4 v1, Vector4 v2 );
public static float vector4Distance( Vector4 v1, Vector4 v2 );
public static float vector4DistanceSqr( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Scale( Vector4 v, float scale );
public static Vector4 vector4Scale(Arena arena, Vector4 v, float scale );
public static Vector4 vector4Multiply( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Multiply(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4Negate( Vector4 v );
public static Vector4 vector4Negate(Arena arena, Vector4 v );
public static Vector4 vector4Divide( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Divide(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4Normalize( Vector4 v );
public static Vector4 vector4Normalize(Arena arena, Vector4 v );
public static Vector4 vector4Min( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Min(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4Max( Vector4 v1, Vector4 v2 );
public static Vector4 vector4Max(Arena arena, Vector4 v1, Vector4 v2 );
public static Vector4 vector4Lerp( Vector4 v1, Vector4 v2, float amount );
public static Vector4 vector4Lerp(Arena arena, Vector4 v1, Vector4 v2, float amount );
public static Vector4 vector4MoveTowards( Vector4 v, Vector4 target, float maxDistance );
public static Vector4 vector4MoveTowards(Arena arena, Vector4 v, Vector4 target, float maxDistance );
public static Vector4 vector4Invert( Vector4 v );
public static Vector4 vector4Invert(Arena arena, Vector4 v );
public static int vector4Equals( Vector4 p, Vector4 q );
public static float matrixDeterminant( Matrix mat );
public static float matrixTrace( Matrix mat );
public static Matrix matrixTranspose( Matrix mat );
public static Matrix matrixTranspose(Arena arena, Matrix mat );
public static Matrix matrixInvert( Matrix mat );
public static Matrix matrixInvert(Arena arena, Matrix mat );
public static Matrix matrixIdentity( );
public static Matrix matrixIdentity(Arena arena );
public static Matrix matrixAdd( Matrix left, Matrix right );
public static Matrix matrixAdd(Arena arena, Matrix left, Matrix right );
public static Matrix matrixSubtract( Matrix left, Matrix right );
public static Matrix matrixSubtract(Arena arena, Matrix left, Matrix right );
public static Matrix matrixMultiply( Matrix left, Matrix right );
public static Matrix matrixMultiply(Arena arena, Matrix left, Matrix right );
public static Matrix matrixTranslate( float x, float y, float z );
public static Matrix matrixTranslate(Arena arena, float x, float y, float z );
public static Matrix matrixRotate( Vector3 axis, float angle );
public static Matrix matrixRotate(Arena arena, Vector3 axis, float angle );
public static Matrix matrixRotateX( float angle );
public static Matrix matrixRotateX(Arena arena, float angle );
public static Matrix matrixRotateY( float angle );
public static Matrix matrixRotateY(Arena arena, float angle );
public static Matrix matrixRotateZ( float angle );
public static Matrix matrixRotateZ(Arena arena, float angle );
public static Matrix matrixRotateXYZ( Vector3 angle );
public static Matrix matrixRotateXYZ(Arena arena, Vector3 angle );
public static Matrix matrixRotateZYX( Vector3 angle );
public static Matrix matrixRotateZYX(Arena arena, Vector3 angle );
public static Matrix matrixScale( float x, float y, float z );
public static Matrix matrixScale(Arena arena, float x, float y, float z );
public static Matrix matrixFrustum( double left, double right, double bottom, double top, double nearPlane, double farPlane );
public static Matrix matrixFrustum(Arena arena, double left, double right, double bottom, double top, double nearPlane, double farPlane );
public static Matrix matrixPerspective( double fovY, double aspect, double nearPlane, double farPlane );
public static Matrix matrixPerspective(Arena arena, double fovY, double aspect, double nearPlane, double farPlane );
public static Matrix matrixOrtho( double left, double right, double bottom, double top, double nearPlane, double farPlane );
public static Matrix matrixOrtho(Arena arena, double left, double right, double bottom, double top, double nearPlane, double farPlane );
public static Matrix matrixLookAt( Vector3 eye, Vector3 target, Vector3 up );
public static Matrix matrixLookAt(Arena arena, Vector3 eye, Vector3 target, Vector3 up );
public static MemorySegment matrixToFloatV( Matrix mat );
public static MemorySegment matrixToFloatV(Arena arena, Matrix mat );
public static Vector4 quaternionAdd( Vector4 q1, Vector4 q2 );
public static Vector4 quaternionAdd(Arena arena, Vector4 q1, Vector4 q2 );
public static Vector4 quaternionAddValue( Vector4 q, float add );
public static Vector4 quaternionAddValue(Arena arena, Vector4 q, float add );
public static Vector4 quaternionSubtract( Vector4 q1, Vector4 q2 );
public static Vector4 quaternionSubtract(Arena arena, Vector4 q1, Vector4 q2 );
public static Vector4 quaternionSubtractValue( Vector4 q, float sub );
public static Vector4 quaternionSubtractValue(Arena arena, Vector4 q, float sub );
public static Vector4 quaternionIdentity( );
public static Vector4 quaternionIdentity(Arena arena );
public static float quaternionLength( Vector4 q );
public static Vector4 quaternionNormalize( Vector4 q );
public static Vector4 quaternionNormalize(Arena arena, Vector4 q );
public static Vector4 quaternionInvert( Vector4 q );
public static Vector4 quaternionInvert(Arena arena, Vector4 q );
public static Vector4 quaternionMultiply( Vector4 q1, Vector4 q2 );
public static Vector4 quaternionMultiply(Arena arena, Vector4 q1, Vector4 q2 );
public static Vector4 quaternionScale( Vector4 q, float mul );
public static Vector4 quaternionScale(Arena arena, Vector4 q, float mul );
public static Vector4 quaternionDivide( Vector4 q1, Vector4 q2 );
public static Vector4 quaternionDivide(Arena arena, Vector4 q1, Vector4 q2 );
public static Vector4 quaternionLerp( Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionLerp(Arena arena, Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionNlerp( Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionNlerp(Arena arena, Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionSlerp( Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionSlerp(Arena arena, Vector4 q1, Vector4 q2, float amount );
public static Vector4 quaternionCubicHermiteSpline( Vector4 q1, Vector4 outTangent1, Vector4 q2, Vector4 inTangent2, float t );
public static Vector4 quaternionCubicHermiteSpline(Arena arena, Vector4 q1, Vector4 outTangent1, Vector4 q2, Vector4 inTangent2, float t );
public static Vector4 quaternionFromVector3ToVector3( Vector3 from, Vector3 to );
public static Vector4 quaternionFromVector3ToVector3(Arena arena, Vector3 from, Vector3 to );
public static Vector4 quaternionFromMatrix( Matrix mat );
public static Vector4 quaternionFromMatrix(Arena arena, Matrix mat );
public static Matrix quaternionToMatrix( Vector4 q );
public static Matrix quaternionToMatrix(Arena arena, Vector4 q );
public static Vector4 quaternionFromAxisAngle( Vector3 axis, float angle );
public static Vector4 quaternionFromAxisAngle(Arena arena, Vector3 axis, float angle );
public static void quaternionToAxisAngle( Vector4 q, Vector3 outAxis, java.nio.FloatBuffer outAngle );
public static Vector4 quaternionFromEuler( float pitch, float yaw, float roll );
public static Vector4 quaternionFromEuler(Arena arena, float pitch, float yaw, float roll );
public static Vector3 quaternionToEuler( Vector4 q );
public static Vector3 quaternionToEuler(Arena arena, Vector4 q );
public static Vector4 quaternionTransform( Vector4 q, Matrix mat );
public static Vector4 quaternionTransform(Arena arena, Vector4 q, Matrix mat );
public static int quaternionEquals( Vector4 p, Vector4 q );
public static void matrixDecompose( Matrix mat, Vector3 translation, Vector4 rotation, Vector3 scale );
public static void rlMatrixMode( int mode );
public static void rlPushMatrix( );
public static void rlPopMatrix( );
public static void rlLoadIdentity( );
public static void rlTranslatef( float x, float y, float z );
public static void rlRotatef( float angle, float x, float y, float z );
public static void rlScalef( float x, float y, float z );
public static void rlMultMatrixf( MemorySegment matf );
public static void rlFrustum( double left, double right, double bottom, double top, double znear, double zfar );
public static void rlOrtho( double left, double right, double bottom, double top, double znear, double zfar );
public static void rlViewport( int x, int y, int width, int height );
public static void rlSetClipPlanes( double nearPlane, double farPlane );
public static double rlGetCullDistanceNear( );
public static double rlGetCullDistanceFar( );
public static void rlBegin( int mode );
public static void rlEnd( );
public static void rlVertex2i( int x, int y );
public static void rlVertex2f( float x, float y );
public static void rlVertex3f( float x, float y, float z );
public static void rlTexCoord2f( float x, float y );
public static void rlNormal3f( float x, float y, float z );
public static void rlColor4ub( byte r, byte g, byte b, byte a );
public static void rlColor3f( float x, float y, float z );
public static void rlColor4f( float x, float y, float z, float w );
public static boolean rlEnableVertexArray( int vaoId );
public static void rlDisableVertexArray( );
public static void rlEnableVertexBuffer( int id );
public static void rlDisableVertexBuffer( );
public static void rlEnableVertexBufferElement( int id );
public static void rlDisableVertexBufferElement( );
public static void rlEnableVertexAttribute( int index );
public static void rlDisableVertexAttribute( int index );
public static void rlActiveTextureSlot( int slot );
public static void rlEnableTexture( int id );
public static void rlDisableTexture( );
public static void rlEnableTextureCubemap( int id );
public static void rlDisableTextureCubemap( );
public static void rlTextureParameters( int id, int param, int value );
public static void rlCubemapParameters( int id, int param, int value );
public static void rlEnableShader( int id );
public static void rlDisableShader( );
public static void rlEnableFramebuffer( int id );
public static void rlDisableFramebuffer( );
public static int rlGetActiveFramebuffer( );
public static void rlActiveDrawBuffers( int count );
public static void rlBlitFramebuffer( int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int dstWidth, int dstHeight, int bufferMask );
public static void rlBindFramebuffer( int target, int framebuffer );
public static void rlEnableColorBlend( );
public static void rlDisableColorBlend( );
public static void rlEnableDepthTest( );
public static void rlDisableDepthTest( );
public static void rlEnableDepthMask( );
public static void rlDisableDepthMask( );
public static void rlEnableBackfaceCulling( );
public static void rlDisableBackfaceCulling( );
public static void rlColorMask( boolean r, boolean g, boolean b, boolean a );
public static void rlSetCullFace( int mode );
public static void rlEnableScissorTest( );
public static void rlDisableScissorTest( );
public static void rlScissor( int x, int y, int width, int height );
public static void rlEnableWireMode( );
public static void rlEnablePointMode( );
public static void rlDisableWireMode( );
public static void rlSetLineWidth( float width );
public static float rlGetLineWidth( );
public static void rlEnableSmoothLines( );
public static void rlDisableSmoothLines( );
public static void rlEnableStereoRender( );
public static void rlDisableStereoRender( );
public static boolean rlIsStereoRenderEnabled( );
public static void rlClearColor( byte r, byte g, byte b, byte a );
public static void rlClearScreenBuffers( );
public static void rlCheckErrors( );
public static void rlSetBlendMode( int mode );
public static void rlSetBlendFactors( int glSrcFactor, int glDstFactor, int glEquation );
public static void rlSetBlendFactorsSeparate( int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int glEqRGB, int glEqAlpha );
public static void rlglInit( int width, int height );
public static void rlglClose( );
public static void rlLoadExtensions( MemorySegment loader );
public static int rlGetVersion( );
public static void rlSetFramebufferWidth( int width );
public static int rlGetFramebufferWidth( );
public static void rlSetFramebufferHeight( int height );
public static int rlGetFramebufferHeight( );
public static int rlGetTextureIdDefault( );
public static int rlGetShaderIdDefault( );
public static rlRenderBatch rlLoadRenderBatch( int numBuffers, int bufferElements );
public static rlRenderBatch rlLoadRenderBatch(Arena arena, int numBuffers, int bufferElements );
public static void rlUnloadRenderBatch( rlRenderBatch batch );
public static void rlDrawRenderBatch( rlRenderBatch batch );
public static void rlSetRenderBatchActive( rlRenderBatch batch );
public static void rlDrawRenderBatchActive( );
public static boolean rlCheckRenderBatchLimit( int vCount );
public static void rlSetTexture( int id );
public static int rlLoadVertexArray( );
public static int rlLoadVertexBuffer( MemorySegment buffer, int size, boolean dynamic );
public static int rlLoadVertexBufferElement( MemorySegment buffer, int size, boolean dynamic );
public static void rlUpdateVertexBuffer( int bufferId, MemorySegment data, int dataSize, int offset );
public static void rlUpdateVertexBufferElements( int id, MemorySegment data, int dataSize, int offset );
public static void rlUnloadVertexArray( int vaoId );
public static void rlUnloadVertexBuffer( int vboId );
public static void rlSetVertexAttribute( int index, int compSize, int type, boolean normalized, int stride, int offset );
public static void rlSetVertexAttributeDivisor( int index, int divisor );
public static void rlSetVertexAttributeDefault( int locIndex, MemorySegment value, int attribType, int count );
public static void rlDrawVertexArray( int offset, int count );
public static void rlDrawVertexArrayElements( int offset, int count, MemorySegment buffer );
public static void rlDrawVertexArrayInstanced( int offset, int count, int instances );
public static void rlDrawVertexArrayElementsInstanced( int offset, int count, MemorySegment buffer, int instances );
public static int rlLoadTexture( MemorySegment data, int width, int height, int format, int mipmapCount );
public static int rlLoadTextureDepth( int width, int height, boolean useRenderBuffer );
public static int rlLoadTextureCubemap( MemorySegment data, int size, int format, int mipmapCount );
public static void rlUpdateTexture( int id, int offsetX, int offsetY, int width, int height, int format, MemorySegment data );
public static void rlGetGlTextureFormats( int format, MemorySegment glInternalFormat, MemorySegment glFormat, MemorySegment glType );
public static String rlGetPixelFormatName( int format );
public static void rlUnloadTexture( int id );
public static void rlGenTextureMipmaps( int id, int width, int height, int format, java.nio.IntBuffer mipmaps );
public static MemorySegment rlReadTexturePixels( int id, int width, int height, int format );
public static int rlLoadFramebuffer( );
public static void rlFramebufferAttach( int fboId, int texId, int attachType, int texType, int mipLevel );
public static boolean rlFramebufferComplete( int id );
public static void rlUnloadFramebuffer( int id );
public static int rlLoadShaderCode( String vsCode, String fsCode );
public static int rlCompileShader( String shaderCode, int type );
public static int rlLoadShaderProgram( int vShaderId, int fShaderId );
public static void rlUnloadShaderProgram( int id );
public static int rlGetLocationUniform( int shaderId, String uniformName );
public static int rlGetLocationAttrib( int shaderId, String attribName );
public static void rlSetUniform( int locIndex, MemorySegment value, int uniformType, int count );
public static void rlSetUniformMatrix( int locIndex, Matrix mat );
public static void rlSetUniformMatrices( int locIndex, MemorySegment mat, int count );
public static void rlSetUniformSampler( int locIndex, int textureId );
public static void rlSetShader( int id, java.nio.IntBuffer locs );
public static int rlLoadComputeShaderProgram( int shaderId );
public static void rlComputeShaderDispatch( int groupX, int groupY, int groupZ );
public static int rlLoadShaderBuffer( int size, MemorySegment data, int usageHint );
public static void rlUnloadShaderBuffer( int ssboId );
public static void rlUpdateShaderBuffer( int id, MemorySegment data, int dataSize, int offset );
public static void rlBindShaderBuffer( int id, int index );
public static void rlReadShaderBuffer( int id, MemorySegment dest, int count, int offset );
public static void rlCopyShaderBuffer( int destId, int srcId, int destOffset, int srcOffset, int count );
public static int rlGetShaderBufferSize( int id );
public static void rlBindImageTexture( int id, int index, int format, boolean readonly );
public static Matrix rlGetMatrixModelview( );
public static Matrix rlGetMatrixModelview(Arena arena );
public static Matrix rlGetMatrixProjection( );
public static Matrix rlGetMatrixProjection(Arena arena );
public static Matrix rlGetMatrixTransform( );
public static Matrix rlGetMatrixTransform(Arena arena );
public static Matrix rlGetMatrixProjectionStereo( int eye );
public static Matrix rlGetMatrixProjectionStereo(Arena arena, int eye );
public static Matrix rlGetMatrixViewOffsetStereo( int eye );
public static Matrix rlGetMatrixViewOffsetStereo(Arena arena, int eye );
public static void rlSetMatrixProjection( Matrix proj );
public static void rlSetMatrixModelview( Matrix view );
public static void rlSetMatrixProjectionStereo( Matrix right, Matrix left );
public static void rlSetMatrixViewOffsetStereo( Matrix right, Matrix left );
public static void rlLoadDrawCube( );
public static void rlLoadDrawQuad( );