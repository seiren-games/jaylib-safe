/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    alias(libs.plugins.spotless)
    `maven-publish`
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            
            // group, artifactId, version の設定を行います
            groupId = "com.seirengames"
            artifactId = "jaylib-safe"
            version = "0.1.0"
        }
    }
    repositories {
        mavenLocal()
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
    implementation("io.github.electronstudio:jaylib-ffm:+")
}

// Spotlessの設定
spotless {
    java {
        // 自動生成されたjavaファイルだけを整形対象にする
        target(
            "src/main/java/**/RaylibEnum.java"
        )
        // eclipse().configFile("../config/eclipse-java-google-style.xml")
        // googleJavaFormat().aosp() // Google Java Styleを使用
        importOrder() // インポート順の整理
        removeUnusedImports() // 未使用インポートの削除
        trimTrailingWhitespace() // 行末の空白削除
        endWithNewline() // ファイル末尾に改行を追加
    }
}
tasks.withType<com.diffplug.gradle.spotless.SpotlessTask>().configureEach {
    dependsOn(":tool:runEnumGenerator", ":tool:extractFunctions")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
